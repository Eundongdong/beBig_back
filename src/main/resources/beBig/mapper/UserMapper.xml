<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="beBig.mapper.UserMapper">

    <!--userId로 사용자 정보로 조회하는 쿼리-->
    <select id="findByUserId" parameterType="Long" resultType="UserVo">
        SELECT *
        FROM user
        WHERE user_id = #{userId}
    </select>

    <!-- userLoginId로 사용자 정보를 조회하는 쿼리 -->
    <!--아이디 비밀번호 확인-->
    <select id="findByUserLoginId" parameterType="String" resultType="UserVo">
        SELECT *
        FROM user
        WHERE user_login_id = #{userLoginId}
    </select>

    <!-- 사용자 정보를 users 테이블에 삽입하는 쿼리 -->
    <insert id="insert" parameterType="UserVo">
        INSERT INTO user (user_id,
                          fin_type_code,
                          badge_code,
                          user_login_id,
                          user_name,
                          user_nickname,
                          user_password,
                          user_email,
                          user_gender,
                          user_birth,
                          user_age_range,
                          user_login_type,
                          user_mission_current_month_score,
                          user_mission_last_month_score,
                          user_connected_id,
                          user_intro,
                          user_salary)
        VALUES (#{userId},
                #{finTypeCode},
                #{userBadgeCode},
                #{userLoginId},
                #{userName},
                #{userNickname},
                #{userPassword},
                #{userEmail},
                #{userGender},
                #{userBirth},
                #{userAgeRange},
                #{userLoginType},
                #{userMissionCurrentMonthScore},
                #{userMissionLastMonthScore},
                #{userConnectedId},
                #{userIntro},
                #{userSalary})
    </insert>

    <!--아이디 중복체크-->
    <select id="isUserLoginIdDuplicated" resultType="int" parameterType="string">
        SELECT COUNT(*)
        FROM user
        WHERE user_login_id = #{userLoginId}
    </select>

    <!--아이디 찾기-->
    <select id="findUserLoginIdByNameAndEmail" resultType="string" parameterType="map">
        SELECT user_login_id
        FROM user
        WHERE user_name = #{name}
          AND user_email = #{email}
    </select>

    <!-- 이메일과 이름으로 사용자 검색 후 비밀번호 업데이트 -->
    <update id="updatePasswordByUserLoginIdAndEmail" parameterType="map">
        UPDATE user
        SET user_password = #{userPassword}
        WHERE user_login_id = (SELECT user_login_id
                               FROM user
                               WHERE user_name = #{name}
                                 AND user_email = #{email})
          AND user_login_id = #{userLoginId}
    </update>

    <!-- 이메일과 LoginType으로 사용자 검색 후 있는지 여부를 리턴 -->
    <select id="findByEmailAndLoginType" parameterType="map" resultType="boolean">
        SELECT COUNT(*)
        FROM user
        WHERE user_email = #{email}
          AND user_login_type = #{loginType}
    </select>

    <!-- 약관 데이터를 조회하는 쿼리 -->
    <select id="getUtilTerms" resultType="beBig.vo.UtilVo">
        SELECT util_id AS utilId, util_title AS utilTitle, util_content AS utilContent
        FROM util
    </select>

    <update id="updateUserConnectedId">
        UPDATE user
        SET user_connected_id = #{connectedId}
        WHERE user_id = #{userId}
    </update>

    <select id="getUserIdByKaKaoId" resultType="Long" parameterType="string">
        SELECT user_id
        FROM user
        where user_login_id = #{userLoginId}
    </select>

    <!-- refresh_token으로 만료 시간을 조회하는 쿼리 -->
    <select id="getExpiredTimeByRefreshToken" resultType="java.time.LocalDateTime" parameterType="string">
        select expiry_date
        from refresh_token
        where refresh_token = #{refreshToken};
    </select>

    <!-- refresh_token으로 user_id를 조회하는 쿼리 -->
    <select id="getUserIdByRefreshToken" resultType="java.lang.Long" parameterType="string">
        select u.user_id
        from refresh_token rt
                 join user u on u.user_id = rt.user_id
        where rt.refresh_token = #{refreshToken};
    </select>

    <!-- 같은 연령대 유저조회하는 쿼리-->
    <select id="findBySameAgeRange" resultType="UserVo">
        SELECT *
        FROM user
        WHERE user_age_range = (SELECT user_age_range
                                FROM user
                                WHERE user_id =#{userId})
    </select>

    <insert id="saveRefreshTokenRT" parameterType="map">
        INSERT INTO refresh_token (user_id, refresh_token, expiry_date)
        VALUES (#{userId}, #{refreshToken}, #{expiryDate});
    </insert>

    <update id="saveRefreshTokenUser" parameterType="map">
        UPDATE user
        SET refresh_token = #{refreshToken}
        WHERE user_id = #{userId};
    </update>

    <delete id="clearRefreshTokenRT" parameterType="string">
        DELETE
        FROM refresh_token
        WHERE refresh_token = #{refreshToken};
    </delete>

    <update id="clearRefreshTokenUser" parameterType="string">
        UPDATE user
        SET refresh_token = null
        WHERE refresh_token = #{refreshToken};
    </update>

    <!-- 모든 사용자 정보 가져오기 -->
    <select id="getAllUsers" resultType="UserVo">
        SELECT user_id, user_birth
        FROM user
    </select>

    <!-- 사용자 나이 범위 일괄 업데이트 -->
    <update id="updateUsersAgeRanges" parameterType="list">
        UPDATE user
        SET user_age_range =
        CASE
        <foreach collection="list" item="user" separator=" ">
            WHEN user_id = #{user.userId} THEN #{user.userAgeRange}
        </foreach>
        ELSE user_age_range
        END
        WHERE user_id IN
        <foreach collection="list" item="user" open="(" separator="," close=")">
            #{user.userId}
        </foreach>
    </update>


    <update id="updateMonthlyDB" parameterType="map" >
        update user
        set user_mission_current_month_score = #{score}
        where user_id = #{userId};
    </update>

    <delete id="clearRefreshTokenByUserId" parameterType="long">
        delete
        from refresh_token
        where user_id = #{userId};
    </delete>

    <select id="findUserIdByUserLoginId" parameterType="String" resultType="long">
        select user_id
        from user
        where user_login_id = #{userLoginId};
    </select>

    <select id="countRefreshTokenByUserId" parameterType="long" resultType="int">
        select count(*)
        from refresh_token
        where user_id = #{userId}
    </select>

    <!-- 이메일 중복 체크 쿼리 -->
    <select id="checkDuplicateEmail" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM user
        WHERE user_email = #{email}
    </select>

    <!--닉네임 중복 체크-->
    <select id="checkDuplicateNickname" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM user
        WHERE user_nickname = #{nickname}
    </select>


</mapper>