<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="beBig.mapper.CommunityMapper">
    <!-- 게시글을 post 테이블에 삽입하는 쿼리 -->
    <insert id="insert" parameterType="PostVo" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO post (user_id,post_title,post_content, post_category)
        VALUES (#{userId},#{postTitle},#{postContent},#{postCategory});
    </insert>

    <!-- 게시글에 첨부된 이미지를 image 테이블에 첨부하는 쿼리 -->
    <insert id="insertImage" parameterType="PostVo">
        INSERT INTO image(post_id,image_path)
        VALUES
        <foreach collection="postImagePaths" item="imagePath" separator=",">
            (#{postId},#{imagePath})
        </foreach>
    </insert>

    <!-- 게시글 목록을 전부 조회하는 쿼리 -->
    <select id="findAll" resultMap="findDetailMap">
        SELECT post.post_id, post.user_id, user.user_nickname, post.post_title, post.post_content,
               post.post_created_time, post.post_like_hits, post.post_category, user.fin_type_code,
               image.image_path
        FROM post
        LEFT JOIN image ON post.post_id = image.post_id
        JOIN user ON post.user_id = user.user_id
        ORDER BY post.post_id DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 게시글 세부 페이지를 받아오는 ResultMap -->
    <resultMap id="findDetailMap" type="PostVo" autoMapping="false">
        <id property="postId" column="post_id" />
        <result property="userId" column="user_id" />
        <result property="userNickname" column="user_nickname"/>
        <result property="postTitle" column="post_title" />
        <result property="postContent" column="post_content" />
        <result property="postCreatedTime" column="post_created_time" />
        <result property="postLikeHits" column="post_like_hits"/>
        <result property="postCategory" column="post_category" />
        <result property="finTypeCode" column="fin_type_code"/>
        <collection property="postImagePaths" ofType="string">
            <result column="image_path" />
        </collection>
    </resultMap>

    <!-- postId를 기준으로 게시글 상세페이지를 조회하는 쿼리 -->
    <!-- 이미지 테이블과 조인 -->
    <select id="findDetail" resultMap="findDetailMap" parameterType="long">
        SELECT post.post_id, post.user_id, user.user_nickname, post.post_title, post.post_content,
               post.post_created_time, post.post_like_hits, post.post_category, user.fin_type_code,
                image.image_path
        FROM post
        LEFT JOIN image ON post.post_id = image.post_id
        JOIN user ON post.user_id = user.user_id
        WHERE post.post_id = #{postId}
    </select>

    <!-- PostCategory와 FinTypeCode를 기준으로 게시글을 조회하는 쿼리  -->
    <select id="findByPostCategoryAndFinTypeCode" resultMap="findDetailMap" parameterType="map">
        SELECT p.post_id, p.user_id, u.user_nickname, p.post_title, p.post_content, p.post_created_time,
                p.post_like_hits, p.post_category, u.fin_type_code
                ,image.image_path
        FROM post p
        JOIN user u ON p.user_id = u.user_id
        LEFT JOIN image ON p.post_id = image.post_id
        <where>
            <if test="postCategory != null">
                p.post_category = #{postCategory}
            </if>
            <if test="finTypeCode != null">
                <if test="postCategory != null">
                    AND u.fin_type_code = #{finTypeCode}
                </if>
                <if test="postCategory == null">
                    u.fin_type_code = #{finTypeCode}
                </if>
            </if>
        </where>
        <choose>
            <when test="sortType == 'like'">
                ORDER BY p.post_like_hits DESC
            </when>
            <otherwise>
                ORDER BY p.post_created_time DESC
            </otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- PostCategory와 FinTypeCode를 기준으로 총 게시글 수를 조회하는 쿼리  -->
    <select id="findPostCountByPostCategoryAndFinTypeCode" resultType="long" parameterType="map">
        SELECT COUNT(*)
        FROM post p
        JOIN user u ON p.user_id = u.user_id
        <where>
            <if test="postCategory != null">
                p.post_category = #{postCategory}
            </if>
            <if test="finTypeCode != null">
                <if test="postCategory != null">
                    AND u.fin_type_code = #{finTypeCode}
                </if>
                <if test="postCategory == null">
                    u.fin_type_code = #{finTypeCode}
                </if>
            </if>
        </where>
    </select>

    <!-- PostId의 좋아요 갯수를 조회하는 쿼리 -->
    <select id="findLikeHitsByPostId" resultType="int">
        SELECT COUNT(*)
        FROM like_hits
        WHERE post_id = #{postId}
    </select>

    <select id="checkLike" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM like_hits
        WHERE user_id = #{userId}
          AND post_id = #{postId}
    </select>
    <insert id="addLike" parameterType="map">
        INSERT INTO like_hits (user_id, post_id, like_hits_created_time)
        VALUES (#{userId}, #{postId}, NOW())
    </insert>
    <delete id="removeLike" parameterType="map">
        DELETE FROM like_hits
        WHERE user_id = #{userId}
          AND post_id = #{postId}
    </delete>
    <update id="updateLikeCnt" parameterType="Long">
        UPDATE post
        SET post_like_hits = (SELECT COUNT(*) FROM like_hits WHERE post_id = #{postId})
        WHERE post_id = #{postId}
    </update>
    <update id="updateLike" parameterType="map">
        UPDATE post
        SET post_like_hits = post_like_hits + #{likeCnt}
        WHERE post_id = #{postId}
    </update>

    <!-- 게시글 수정 -->
    <update id="update" parameterType="PostVo">
        UPDATE post
        SET post_title = #{postTitle},
            post_content = #{postContent},
            post_category = #{postCategory},
            post_updated_time = NOW()
        WHERE post_id = #{postId}
    </update>

    <!-- 게시글 삭제-->
    <!-- On Cascade로 연관 image, like 함꼐 삭제됨-->
    <delete id="delete" parameterType="long">
        DELETE FROM post where post_id = #{postId}
    </delete>
</mapper>