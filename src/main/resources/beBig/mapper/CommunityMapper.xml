<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="beBig.mapper.CommunityMapper">
    <insert id="insert" parameterType="PostVo" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO post (user_id,post_title,post_content, post_category,fin_type_code)
        VALUES (#{userId},#{postTitle},#{postContent},#{postCategory},#{finTypeCode});
    </insert>

    <insert id="insertImage" parameterType="PostVo">
        INSERT INTO image(post_id,image_path)
        VALUES
        <foreach collection="postImagePaths" item="imagePath" separator=",">
            (#{postId},#{imagePath})
        </foreach>
    </insert>

    <select id="findAll" resultType="PostVo">
        SELECT *
        FROM post
        ORDER BY post_id DESC
    </select>

    <resultMap id="findDetailMap" type="PostVo" autoMapping="false">
        <id property="postId" column="post_id" />
        <result property="userId" column="user_id" />
        <result property="postTitle" column="post_title" />
        <result property="postContent" column="post_content" />
        <result property="postCreatedTime" column="post_created_time" />
        <result property="postCategory" column="post_category" />
        <collection property="postImagePaths" ofType="string">
            <result column="image_path" />
        </collection>
    </resultMap>

    <select id="findDetail" resultMap="findDetailMap" parameterType="long">
        SELECT post.post_id, post.user_id,post.post_title, post.post_content,
               post.post_created_time,post.post_category,
               image.image_path
        FROM post
                 LEFT JOIN image ON post.post_id = image.post_id
        WHERE post.post_id = #{postId}
    </select>
    <select id="findByPostCategoryAndFinTypeCode" resultType="PostVo" parameterType="map">
        SELECT *
        FROM post
        <where>
            <if test="postCategory != null">
                post_category = #{postCategory}
            </if>
            <if test="postWriterFinTypeCode != null">
                AND post_writer_fin_type_code = #{postWriterFinTypeCode}
            </if>
        </where>
        ORDER BY post_id DESC
    </select>

    <select id="findLikeHitsByPostId" resultType="int">
        SELECT COUNT(*)
        FROM like_hits
        WHERE post_id = #{postId}
    </select>

    <select id="checkLike" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM like_hits
        WHERE like_hits_user_no = #{postWriterId}
          AND like_hits_post_id = #{postId}
    </select>
    <insert id="addLike" parameterType="map">
        INSERT INTO like_hits (like_hits_user_no, like_hits_post_id, like_hits_created_time)
        VALUES (#{postWriterId}, #{postId}, NOW())
    </insert>
    <delete id="removeLike" parameterType="map">
        DELETE FROM like_hits
        WHERE like_hits_user_no = #{postWriterId}
          AND like_hits_post_id = #{postId}
    </delete>
    <update id="updateLikeCnt" parameterType="Long">
        UPDATE post
        SET post_like_hits = (SELECT COUNT(*) FROM like_hits WHERE like_hits_post_id = #{postId})
        WHERE post_id = #{postId}
    </update>
    <update id="updateLike" parameterType="map">
        UPDATE post
        SET post_like_hits = post_like_hits + #{likeCnt}
        WHERE post_id = #{postId}
    </update>
    <select id="getPostWriterId" resultType="String" parameterType="Long">
        SELECT post_writer_id
        FROM post
        WHERE post_id = #{postId}
    </select>
    <update id="update" parameterType="PostVo">
        UPDATE post
        SET
            post_title = #{postTitle},
            post_content = #{postContent},
            post_category = #{postCategory},
            post_updated_time = NOW()
        WHERE post_id = #{postId}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM post where post_id = #{postId}
    </delete>
</mapper>